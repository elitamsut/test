name: CI Pipeline

on:
  push:
    branches:
      - main
      - test
  pull_request:
    branches:
      - main
      - test

env:
  IMAGE_CONFIG: 'image-config.yaml'  # Path to your image configuration file
  VALUES_FILE: 'flask-hello-world/values.yaml'  # Path to your Helm values file
  DOCKER_IMAGE: 'elitamsut/myapp'     # Your custom Docker image name

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.GITHUB_SSH_KEY }}
          ref: 'test'

      # Set up Docker Buildx
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      # Get the image tag from image-config.yaml and update values.yaml
      - name: Update Image Tag in values.yaml
        run: |
          IMAGE_TAG=$(yq eval '.image.tag' $IMAGE_CONFIG)  # Get the tag from image-config.yaml
          echo "Current IMAGE_TAG: ${IMAGE_TAG}"  # Debug statement to check the value
          echo "Updating image tag in values.yaml to: ${IMAGE_TAG}"
          yq eval -i '.image.tag = strenv(IMAGE_TAG)' $VALUES_FILE  # Update the image tag in values.yaml
          
          # Verify the update
          echo "Updated values.yaml content:"
          cat $VALUES_FILE  # Print updated values.yaml for verification

      # Build Docker Image
      - name: Build Docker Image
        id: build
        run: |
          IMAGE_TAG=$(yq eval '.image.tag' $IMAGE_CONFIG)  # Get the tag again for building the image
          echo "Building Docker image with tag: ${IMAGE_TAG}"
          docker build --pull -t ${{ env.DOCKER_IMAGE }}:${IMAGE_TAG} .
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV  # Store the image tag in an environment variable

      # Log in to the elitamsut registry
      - name: Log in to elitamsut Registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Push Docker Image
      - name: Push Docker Image
        run: |
          echo "Pushing Docker image: ${{ env.DOCKER_IMAGE }}:${{ env.IMAGE_TAG }}"
          docker push ${{ env.DOCKER_IMAGE }}:${{ env.IMAGE_TAG }}

      # Notify Success
      - name: Notify Success
        run: echo "Docker image creation and push completed successfully!"

